generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String          @unique
  name              String
  phone             String?
  dateOfBirth       String?
  yearsOfExperience Int?
  nid               Int?
  role              Role
  status            Status          @default(PENDING)
  password          String
  fcmToken          String?
  image             String?
  certificate       String?
  aboutMe           String?
  connectAccountId  String?
  customerId        String?
  isVerified        Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  receiver          Notifications[] @relation("receiverDetails")
  sender            Notifications[] @relation("senderDetails")
  reviews           Review[]        @relation("userDetails")
  booking           Booking[]       @relation("userDetails")
  registration      registration[]  @relation("playerIdDetails")
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}

model Ground {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  description   String
  rent          Float
  image         String?
  facilities    String[]
  features      String[]
  timeSlots     String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  groundReviews Review[]  @relation("groundDetails")
  booking       Booking[] @relation("groundDetails")
}

model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId // The ID of the user who made the booking
  groundId    String        @db.ObjectId // The ID of the playground
  date        String
  startTime   String
  bookingCode Int
  players     Json?
  status      bookingStatus @default(PENDING) // Status of the booking (e.g., booked, canceled)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ground      Ground        @relation("groundDetails", fields: [groundId], references: [id], onDelete: Cascade)
  user        User          @relation("userDetails", fields: [userId], references: [id], onDelete: Cascade) // User who booked the slot
}

model event {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  eventName             String
  aboutEvent            String
  groundName            String
  lastDayOfRegistration String
  entryFee              Float
  tournamentStartDate   String
  tournamentEndDate     String
  tournamentStartTime   String
  totalTeam             Int
  totalMatch            Int
  priceMoney            Int
  groundImage           String
  previousMemoryImage   Json[]
  tournnamentRules      Json[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  registration          registration[] @relation("eventDetails")
}

model registration {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId          String   @db.ObjectId
  playerId         String   @db.ObjectId
  teamName         String
  teamLeaderName   String
  phone            String
  email            String    @unique
  registrationCode Int
  entryFee         Float?
  teamMembers      Json?
  isVerified       Boolean @default(false)
  isPaid           Boolean @default(false)
  eventDetails     event    @relation("eventDetails", fields: [eventId], references: [id], onDelete: Cascade)
  playerIdDetails  User     @relation("playerIdDetails", fields: [playerId], references: [id], onDelete: Cascade)
  status registrationStatus @default(PENDING)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  groundId      String   @db.ObjectId
  rating        Float
  comment       String?
  userDetails   User     @relation("userDetails", fields: [userId], references: [id], onDelete: Cascade)
  groundDetails Ground   @relation("groundDetails", fields: [groundId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String?  @db.ObjectId
  title      String
  body       String
  bookingId  String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiverDetails", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User?    @relation("senderDetails", fields: [senderId], references: [id], onDelete: Cascade)
}

enum Role {
  PLAYER
  TRAINER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}

enum bookingStatus {
  PENDING
  BOOKED
  DECLINED
}

enum inviteStatus {
  PENDING
  INVITED
  NONE
}

enum registrationStatus {
  PENDING
  CONFIRMED
  DECLINED
}
