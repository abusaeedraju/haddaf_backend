generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String          @unique
  name              String
  phone             String?
  dateOfBirth       String?
  yearsOfExperience Int?
  nid               Int?
  role              Role
  status            Status          @default(PENDING)
  password          String
  fcmToken          String?
  image             String?
  certificate       String?
  aboutMe           String?
  connectAccountId  String?
  customerId        String?
  isVerified        Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  receiver          Notifications[] @relation("receiverDetails")
  sender            Notifications[] @relation("senderDetails")
  reviews           Review[]        @relation("userDetails")
  booking           Booking[]       @relation("userDetails")
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}

model Ground {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  description   String
  rent          Float
  image         String?
  facilities    String[]
  features      String[]
  timeSlots     String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  groundReviews Review[] @relation("groundDetails")
  events        event[]  @relation("groundDetails")
}

model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId // The ID of the user who made the booking
  groundId    String        @db.ObjectId // The ID of the playground
  date        Int
  startTime   String
  bookingCode Int
  status      bookingStatus @default(PENDING) // Status of the booking (e.g., booked, canceled)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation("userDetails", fields: [userId], references: [id]) // User who booked the slot
}

model event {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  eventName             String
  aboutEvent            String
  lastDayOfRegistration String
  entryFee              Float
  tournamentStartDate   String
  tournamentEndDate     String
  tournamentStartTime   String
  totalTeam             Int
  totalMatch            Int
  priceMoney            Int
  previousMemoryImage   Json[]
  tournnamentRules      Json[]
  groundId              String   @db.ObjectId // The ID of the playground
  groundDetails         Ground   @relation("groundDetails", fields: [groundId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  groundId      String   @db.ObjectId
  rating        Float
  comment       String?
  userDetails   User     @relation("userDetails", fields: [userId], references: [id])
  groundDetails Ground   @relation("groundDetails", fields: [groundId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiverDetails", fields: [receiverId], references: [id])
  sender     User?    @relation("senderDetails", fields: [senderId], references: [id])
}

enum Role {
  PLAYER
  TRAINER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}

enum bookingStatus {
  PENDING
  BOOKED
  DECLINED
}
